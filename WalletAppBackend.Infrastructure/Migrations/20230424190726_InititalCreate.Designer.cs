// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WalletAppBackend.Infrastructure.DataAccess.Implementation.Repositories;

#nullable disable

namespace WalletAppBackend.Infrastructure.Migrations
{
    [DbContext(typeof(WalletDbContext))]
    [Migration("20230424190726_InititalCreate")]
    partial class InititalCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WalletAppBackend.Infrastructure.DataAccess.Implementation.Entities.CardBalanceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Balance")
                        .HasColumnType("money");

                    b.Property<decimal>("MaxLimit")
                        .HasColumnType("money");

                    b.Property<string>("PaymentMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("CardBalance", (string)null);
                });

            modelBuilder.Entity("WalletAppBackend.Infrastructure.DataAccess.Implementation.Entities.DailyPointsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DayOfSeasone")
                        .HasColumnType("int")
                        .HasColumnName("DayOfSeasone");

                    b.Property<long>("Points")
                        .HasColumnType("bigint")
                        .HasColumnName("Points");

                    b.HasKey("Id");

                    b.ToTable("DailyPoints", (string)null);
                });

            modelBuilder.Entity("WalletAppBackend.Infrastructure.DataAccess.Implementation.Entities.TransactionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("money")
                        .HasColumnName("Amount");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetimeoffset(7)")
                        .HasColumnName("Date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SenderId");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Status");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Type");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.HasIndex("UserId");

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("WalletAppBackend.Infrastructure.DataAccess.Implementation.Entities.TrustedPersonEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TrustedPersonEntity");
                });

            modelBuilder.Entity("WalletAppBackend.Infrastructure.DataAccess.Implementation.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IconLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("IconLink");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit")
                        .HasColumnName("IsAdmin");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Password");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Username");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("WalletAppBackend.Infrastructure.DataAccess.Implementation.Entities.CardBalanceEntity", b =>
                {
                    b.HasOne("WalletAppBackend.Infrastructure.DataAccess.Implementation.Entities.UserEntity", "User")
                        .WithOne("CardBalance")
                        .HasForeignKey("WalletAppBackend.Infrastructure.DataAccess.Implementation.Entities.CardBalanceEntity", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WalletAppBackend.Infrastructure.DataAccess.Implementation.Entities.TransactionEntity", b =>
                {
                    b.HasOne("WalletAppBackend.Infrastructure.DataAccess.Implementation.Entities.TrustedPersonEntity", "TrustedPerson")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WalletAppBackend.Infrastructure.DataAccess.Implementation.Entities.UserEntity", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrustedPerson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WalletAppBackend.Infrastructure.DataAccess.Implementation.Entities.TrustedPersonEntity", b =>
                {
                    b.HasOne("WalletAppBackend.Infrastructure.DataAccess.Implementation.Entities.UserEntity", "User")
                        .WithMany("TrustedPersons")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WalletAppBackend.Infrastructure.DataAccess.Implementation.Entities.UserEntity", b =>
                {
                    b.Navigation("CardBalance")
                        .IsRequired();

                    b.Navigation("Transactions");

                    b.Navigation("TrustedPersons");
                });
#pragma warning restore 612, 618
        }
    }
}
